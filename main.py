import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±—É–¥–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.getenv("BOT_TOKEN", "8488877565:AAHVROf6p15vqVhIEkZ_QpLabDoVbk3cLpU")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏)
users = {}
tasks = [
    {"id": 1, "title": "üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", "reward": 10, "description": "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ"},
    {"id": 2, "title": "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "reward": 5, "description": "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª"},
    {"id": 3, "title": "üåê –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", "reward": 3, "description": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ"}
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {
            "balance": 0,
            "level": 1,
            "completed_tasks": []
        }
    
    keyboard = [
        [InlineKeyboardButton("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskBot!\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–µ–Ω—å–≥–∏! üí∞",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "tasks":
        await show_tasks(query, context)
    elif data == "balance":
        await show_balance(query, context)
    elif data == "profile":
        await show_profile(query, context)
    elif data.startswith("task_"):
        task_id = int(data.split("_")[1])
        await take_task(query, context, task_id)

async def show_tasks(query, context):
    keyboard = []
    for task in tasks:
        keyboard.append([InlineKeyboardButton(
            f"{task['title']} - {task['reward']} –º–æ–Ω–µ—Ç",
            callback_data=f"task_{task['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def show_balance(query, context):
    user_id = query.from_user.id
    user = users.get(user_id, {"balance": 0, "level": 1})
    
    await query.edit_message_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n\n"
        f"üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 50 —Ä—É–±–ª–µ–π\n"
        f"üì§ –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Å 5 —É—Ä–æ–≤–Ω—è",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    )

async def show_profile(query, context):
    user_id = query.from_user.id
    user = users.get(user_id, {"balance": 0, "level": 1, "completed_tasks": []})
    
    await query.edit_message_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: {user_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {user['level']}/25\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(user['completed_tasks'])}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    )

async def take_task(query, context, task_id):
    user_id = query.from_user.id
    task = next((t for t in tasks if t["id"] == task_id), None)
    
    if task:
        await query.edit_message_text(
            f"üìã –ó–∞–¥–∞–Ω–∏–µ: {task['title']}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} –º–æ–Ω–µ—Ç\n\n"
            f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!",reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data="tasks")]])
        )

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if name == "__main__":
    main()
